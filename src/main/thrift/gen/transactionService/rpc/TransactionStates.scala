/**
 * Generated by Scrooge
 *   version: 4.11.0
 *   rev: 53125d3304736db41e23d8474e5765d6c2fe3ded
 *   built at: 20161011-151232
 */
package transactionService.rpc

import com.twitter.scrooge.ThriftEnum


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object TransactionStates {
  
  case object Opened extends transactionService.rpc.TransactionStates {
    val value: Int = 1
    val name: String = "Opened"
    val originalName: String = "Opened"
  }

  private[this] val _SomeOpened = _root_.scala.Some(transactionService.rpc.TransactionStates.Opened)
  
  case object Checkpointed extends transactionService.rpc.TransactionStates {
    val value: Int = 2
    val name: String = "Checkpointed"
    val originalName: String = "Checkpointed"
  }

  private[this] val _SomeCheckpointed = _root_.scala.Some(transactionService.rpc.TransactionStates.Checkpointed)
  
  case object Invalid extends transactionService.rpc.TransactionStates {
    val value: Int = 3
    val name: String = "Invalid"
    val originalName: String = "Invalid"
  }

  private[this] val _SomeInvalid = _root_.scala.Some(transactionService.rpc.TransactionStates.Invalid)

  case class EnumUnknownTransactionStates(value: Int) extends transactionService.rpc.TransactionStates {
    val name: String = "EnumUnknownTransactionStates" + value
    def originalName: String = name
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): transactionService.rpc.TransactionStates =
    value match {
      case 1 => transactionService.rpc.TransactionStates.Opened
      case 2 => transactionService.rpc.TransactionStates.Checkpointed
      case 3 => transactionService.rpc.TransactionStates.Invalid
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownTransactionStates(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): transactionService.rpc.TransactionStates =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownTransactionStates(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[transactionService.rpc.TransactionStates] =
    value match {
      case 1 => _SomeOpened
      case 2 => _SomeCheckpointed
      case 3 => _SomeInvalid
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[transactionService.rpc.TransactionStates] =
    name.toLowerCase match {
      case "opened" => _SomeOpened
      case "checkpointed" => _SomeCheckpointed
      case "invalid" => _SomeInvalid
      case _ => _root_.scala.None
    }

  lazy val list: List[transactionService.rpc.TransactionStates] = scala.List[transactionService.rpc.TransactionStates](
    transactionService.rpc.TransactionStates.Opened,
    transactionService.rpc.TransactionStates.Checkpointed,
    transactionService.rpc.TransactionStates.Invalid
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait TransactionStates extends ThriftEnum with Serializable