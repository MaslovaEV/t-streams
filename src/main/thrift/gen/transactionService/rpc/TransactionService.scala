/**
 * Generated by Scrooge
 *   version: 4.14.0
 *   rev: 56cc6a6ed000a14f1a3fef4e3e5e60dab4478499
 *   built at: 20170203-164626
 */
package transactionService.rpc

import com.twitter.scrooge.{
  LazyTProtocol,
  HasThriftStructCodec3,
  TFieldBlob,
  ThriftService,
  ThriftStruct,
  ThriftStructCodec,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftResponse,
  ThriftUtil,
  ToThriftService
}
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TTransport
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  Builder,
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait TransactionService[+MM[_]] extends ThriftService {
  
  def putStream(stream: String, partitions: Int, description: Option[String] = None, ttl: Long): MM[Boolean]
  
  def checkStreamExists(stream: String): MM[Boolean]
  
  def getStream(stream: String): MM[transactionService.rpc.Stream]
  
  def delStream(stream: String): MM[Boolean]
  
  def putTransaction(transaction: transactionService.rpc.Transaction): MM[Boolean]
  
  def putTransactions(transactions: Seq[transactionService.rpc.Transaction] = Seq[transactionService.rpc.Transaction]()): MM[Boolean]
  
  def scanTransactions(stream: String, partition: Int, from: Long, to: Long): MM[Seq[transactionService.rpc.ProducerTransaction]]
  
  def putTransactionData(stream: String, partition: Int, transaction: Long, data: Seq[ByteBuffer] = Seq[ByteBuffer](), from: Int): MM[Boolean]
  
  def getTransactionData(stream: String, partition: Int, transaction: Long, from: Int, to: Int): MM[Seq[ByteBuffer]]
  
  def setConsumerState(name: String, stream: String, partition: Int, transaction: Long): MM[Boolean]
  
  def getConsumerState(name: String, stream: String, partition: Int): MM[Long]
  
  def authenticate(authKey: String): MM[transactionService.rpc.AuthInfo]
  
  def isValid(token: Int): MM[Boolean]
}



object TransactionService { self =>

  object PutStream extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("putStream_args")
      val StreamField = new TField("stream", TType.STRING, 1)
      val StreamFieldManifest = implicitly[Manifest[String]]
      val PartitionsField = new TField("partitions", TType.I32, 2)
      val PartitionsFieldManifest = implicitly[Manifest[Int]]
      val DescriptionField = new TField("description", TType.STRING, 3)
      val DescriptionFieldManifest = implicitly[Manifest[String]]
      val TtlField = new TField("ttl", TType.I64, 4)
      val TtlFieldManifest = implicitly[Manifest[Long]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          StreamField,
          false,
          false,
          StreamFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          PartitionsField,
          false,
          false,
          PartitionsFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          DescriptionField,
          true,
          false,
          DescriptionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          TtlField,
          false,
          false,
          TtlFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          stream =
            {
              val field = original.stream
              field
            },
          partitions =
            {
              val field = original.partitions
              field
            },
          description =
            {
              val field = original.description
              field.map { field =>
                field
              }
            },
          ttl =
            {
              val field = original.ttl
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var stream: String = null
        var partitions: Int = 0
        var description: _root_.scala.Option[String] = _root_.scala.None
        var ttl: Long = 0L
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    stream = readStreamValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'stream' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I32 =>
                    partitions = readPartitionsValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'partitions' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.STRING =>
                    description = _root_.scala.Some(readDescriptionValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'description' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 4 =>
                _field.`type` match {
                  case TType.I64 =>
                    ttl = readTtlValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'ttl' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          stream,
          partitions,
          description,
          ttl,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        stream: String,
        partitions: Int,
        description: _root_.scala.Option[String] = _root_.scala.None,
        ttl: Long
      ): Args =
        new Args(
          stream,
          partitions,
          description,
          ttl
        )
    
      def unapply(_item: Args): _root_.scala.Option[_root_.scala.Tuple4[String, Int, Option[String], Long]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readStreamValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeStreamField(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(StreamField)
        writeStreamValue(stream_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeStreamValue(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(stream_item)
      }
    
      @inline private def readPartitionsValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writePartitionsField(partitions_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(PartitionsField)
        writePartitionsValue(partitions_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writePartitionsValue(partitions_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(partitions_item)
      }
    
      @inline private def readDescriptionValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeDescriptionField(description_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(DescriptionField)
        writeDescriptionValue(description_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeDescriptionValue(description_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(description_item)
      }
    
      @inline private def readTtlValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeTtlField(ttl_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TtlField)
        writeTtlValue(ttl_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTtlValue(ttl_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(ttl_item)
      }
    
    
    }
    
    class Args(
        val stream: String,
        val partitions: Int,
        val description: _root_.scala.Option[String],
        val ttl: Long,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product4[String, Int, Option[String], Long]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        stream: String,
        partitions: Int,
        description: _root_.scala.Option[String] = _root_.scala.None,
        ttl: Long
      ) = this(
        stream,
        partitions,
        description,
        ttl,
        Map.empty
      )
    
      def _1 = stream
      def _2 = partitions
      def _3 = description
      def _4 = ttl
    
      def toTuple: _root_.scala.Tuple4[String, Int, Option[String], Long] = {
        (
          stream,
          partitions,
          description,
          ttl
        )
      }
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (stream ne null) writeStreamField(stream, _oprot)
        writePartitionsField(partitions, _oprot)
        if (description.isDefined) writeDescriptionField(description.get, _oprot)
        writeTtlField(ttl, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        stream: String = this.stream,
        partitions: Int = this.partitions,
        description: _root_.scala.Option[String] = this.description,
        ttl: Long = this.ttl,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          stream,
          partitions,
          description,
          ttl,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 4
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.stream
        case 1 => this.partitions
        case 2 => this.description
        case 3 => this.ttl
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Boolean
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("putStream_result")
      val SuccessField = new TField("success", TType.BOOL, 0)
      val SuccessFieldManifest = implicitly[Manifest[Boolean]]
      val ErrorField = new TField("error", TType.STRUCT, 1)
      val ErrorFieldManifest = implicitly[Manifest[transactionService.rpc.ServerException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ErrorField,
          true,
          false,
          ErrorFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            },
          error =
            {
              val field = original.error
              field.map { field =>
                transactionService.rpc.ServerException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Boolean] = _root_.scala.None
        var error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.BOOL =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.BOOL
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    error = _root_.scala.Some(readErrorValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'error' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          error,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          error
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Boolean = {
        _iprot.readBool()
      }
    
      @inline private def writeSuccessField(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeBool(success_item)
      }
    
      @inline private def readErrorValue(_iprot: TProtocol): transactionService.rpc.ServerException = {
        transactionService.rpc.ServerException.decode(_iprot)
      }
    
      @inline private def writeErrorField(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ErrorField)
        writeErrorValue(error_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeErrorValue(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        error_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Boolean],
        val error: _root_.scala.Option[transactionService.rpc.ServerException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Boolean] with ThriftStruct
      with _root_.scala.Product2[Option[Boolean], Option[transactionService.rpc.ServerException]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ) = this(
        success,
        error,
        Map.empty
      )
    
      def _1 = success
      def _2 = error
    
      def toTuple: _root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]] = {
        (
          success,
          error
        )
      }
    
      def successField: Option[Boolean] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(error)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (error.isDefined) writeErrorField(error.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Boolean] = this.success,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = this.error,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          error,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.error
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    type FunctionType = Nothing
    type ServiceType = Nothing

    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name = "putStream"
    val serviceName = "TransactionService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val putStream$args = PutStream.Args
  type putStream$args = PutStream.Args

  val putStream$result = PutStream.Result
  type putStream$result = PutStream.Result

  object CheckStreamExists extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("checkStreamExists_args")
      val StreamField = new TField("stream", TType.STRING, 1)
      val StreamFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          StreamField,
          false,
          false,
          StreamFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          stream =
            {
              val field = original.stream
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var stream: String = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    stream = readStreamValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'stream' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          stream,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        stream: String
      ): Args =
        new Args(
          stream
        )
    
      def unapply(_item: Args): _root_.scala.Option[String] = _root_.scala.Some(_item.stream)
    
    
      @inline private def readStreamValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeStreamField(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(StreamField)
        writeStreamValue(stream_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeStreamValue(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(stream_item)
      }
    
    
    }
    
    class Args(
        val stream: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[String]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        stream: String
      ) = this(
        stream,
        Map.empty
      )
    
      def _1 = stream
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (stream ne null) writeStreamField(stream, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        stream: String = this.stream,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          stream,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.stream
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Boolean
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("checkStreamExists_result")
      val SuccessField = new TField("success", TType.BOOL, 0)
      val SuccessFieldManifest = implicitly[Manifest[Boolean]]
      val ErrorField = new TField("error", TType.STRUCT, 1)
      val ErrorFieldManifest = implicitly[Manifest[transactionService.rpc.ServerException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ErrorField,
          true,
          false,
          ErrorFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            },
          error =
            {
              val field = original.error
              field.map { field =>
                transactionService.rpc.ServerException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Boolean] = _root_.scala.None
        var error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.BOOL =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.BOOL
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    error = _root_.scala.Some(readErrorValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'error' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          error,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          error
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Boolean = {
        _iprot.readBool()
      }
    
      @inline private def writeSuccessField(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeBool(success_item)
      }
    
      @inline private def readErrorValue(_iprot: TProtocol): transactionService.rpc.ServerException = {
        transactionService.rpc.ServerException.decode(_iprot)
      }
    
      @inline private def writeErrorField(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ErrorField)
        writeErrorValue(error_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeErrorValue(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        error_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Boolean],
        val error: _root_.scala.Option[transactionService.rpc.ServerException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Boolean] with ThriftStruct
      with _root_.scala.Product2[Option[Boolean], Option[transactionService.rpc.ServerException]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ) = this(
        success,
        error,
        Map.empty
      )
    
      def _1 = success
      def _2 = error
    
      def toTuple: _root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]] = {
        (
          success,
          error
        )
      }
    
      def successField: Option[Boolean] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(error)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (error.isDefined) writeErrorField(error.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Boolean] = this.success,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = this.error,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          error,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.error
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    type FunctionType = Nothing
    type ServiceType = Nothing

    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name = "checkStreamExists"
    val serviceName = "TransactionService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val checkStreamExists$args = CheckStreamExists.Args
  type checkStreamExists$args = CheckStreamExists.Args

  val checkStreamExists$result = CheckStreamExists.Result
  type checkStreamExists$result = CheckStreamExists.Result

  object GetStream extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getStream_args")
      val StreamField = new TField("stream", TType.STRING, 1)
      val StreamFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          StreamField,
          false,
          false,
          StreamFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          stream =
            {
              val field = original.stream
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var stream: String = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    stream = readStreamValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'stream' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          stream,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        stream: String
      ): Args =
        new Args(
          stream
        )
    
      def unapply(_item: Args): _root_.scala.Option[String] = _root_.scala.Some(_item.stream)
    
    
      @inline private def readStreamValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeStreamField(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(StreamField)
        writeStreamValue(stream_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeStreamValue(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(stream_item)
      }
    
    
    }
    
    class Args(
        val stream: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[String]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        stream: String
      ) = this(
        stream,
        Map.empty
      )
    
      def _1 = stream
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (stream ne null) writeStreamField(stream, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        stream: String = this.stream,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          stream,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.stream
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = transactionService.rpc.Stream
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getStream_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[transactionService.rpc.Stream]]
      val ErrorField = new TField("error", TType.STRUCT, 1)
      val ErrorFieldManifest = implicitly[Manifest[transactionService.rpc.ServerException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ErrorField,
          true,
          false,
          ErrorFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                transactionService.rpc.Stream.withoutPassthroughFields(field)
              }
            },
          error =
            {
              val field = original.error
              field.map { field =>
                transactionService.rpc.ServerException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[transactionService.rpc.Stream] = _root_.scala.None
        var error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    error = _root_.scala.Some(readErrorValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'error' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          error,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[transactionService.rpc.Stream] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          error
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Tuple2[Option[transactionService.rpc.Stream], Option[transactionService.rpc.ServerException]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): transactionService.rpc.Stream = {
        transactionService.rpc.Stream.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: transactionService.rpc.Stream, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: transactionService.rpc.Stream, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
      @inline private def readErrorValue(_iprot: TProtocol): transactionService.rpc.ServerException = {
        transactionService.rpc.ServerException.decode(_iprot)
      }
    
      @inline private def writeErrorField(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ErrorField)
        writeErrorValue(error_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeErrorValue(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        error_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[transactionService.rpc.Stream],
        val error: _root_.scala.Option[transactionService.rpc.ServerException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[transactionService.rpc.Stream] with ThriftStruct
      with _root_.scala.Product2[Option[transactionService.rpc.Stream], Option[transactionService.rpc.ServerException]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[transactionService.rpc.Stream] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ) = this(
        success,
        error,
        Map.empty
      )
    
      def _1 = success
      def _2 = error
    
      def toTuple: _root_.scala.Tuple2[Option[transactionService.rpc.Stream], Option[transactionService.rpc.ServerException]] = {
        (
          success,
          error
        )
      }
    
      def successField: Option[transactionService.rpc.Stream] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(error)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (error.isDefined) writeErrorField(error.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[transactionService.rpc.Stream] = this.success,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = this.error,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          error,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.error
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    type FunctionType = Nothing
    type ServiceType = Nothing

    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name = "getStream"
    val serviceName = "TransactionService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val getStream$args = GetStream.Args
  type getStream$args = GetStream.Args

  val getStream$result = GetStream.Result
  type getStream$result = GetStream.Result

  object DelStream extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("delStream_args")
      val StreamField = new TField("stream", TType.STRING, 1)
      val StreamFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          StreamField,
          false,
          false,
          StreamFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          stream =
            {
              val field = original.stream
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var stream: String = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    stream = readStreamValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'stream' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          stream,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        stream: String
      ): Args =
        new Args(
          stream
        )
    
      def unapply(_item: Args): _root_.scala.Option[String] = _root_.scala.Some(_item.stream)
    
    
      @inline private def readStreamValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeStreamField(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(StreamField)
        writeStreamValue(stream_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeStreamValue(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(stream_item)
      }
    
    
    }
    
    class Args(
        val stream: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[String]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        stream: String
      ) = this(
        stream,
        Map.empty
      )
    
      def _1 = stream
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (stream ne null) writeStreamField(stream, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        stream: String = this.stream,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          stream,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.stream
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Boolean
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("delStream_result")
      val SuccessField = new TField("success", TType.BOOL, 0)
      val SuccessFieldManifest = implicitly[Manifest[Boolean]]
      val ErrorField = new TField("error", TType.STRUCT, 1)
      val ErrorFieldManifest = implicitly[Manifest[transactionService.rpc.ServerException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ErrorField,
          true,
          false,
          ErrorFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            },
          error =
            {
              val field = original.error
              field.map { field =>
                transactionService.rpc.ServerException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Boolean] = _root_.scala.None
        var error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.BOOL =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.BOOL
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    error = _root_.scala.Some(readErrorValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'error' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          error,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          error
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Boolean = {
        _iprot.readBool()
      }
    
      @inline private def writeSuccessField(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeBool(success_item)
      }
    
      @inline private def readErrorValue(_iprot: TProtocol): transactionService.rpc.ServerException = {
        transactionService.rpc.ServerException.decode(_iprot)
      }
    
      @inline private def writeErrorField(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ErrorField)
        writeErrorValue(error_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeErrorValue(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        error_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Boolean],
        val error: _root_.scala.Option[transactionService.rpc.ServerException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Boolean] with ThriftStruct
      with _root_.scala.Product2[Option[Boolean], Option[transactionService.rpc.ServerException]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ) = this(
        success,
        error,
        Map.empty
      )
    
      def _1 = success
      def _2 = error
    
      def toTuple: _root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]] = {
        (
          success,
          error
        )
      }
    
      def successField: Option[Boolean] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(error)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (error.isDefined) writeErrorField(error.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Boolean] = this.success,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = this.error,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          error,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.error
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    type FunctionType = Nothing
    type ServiceType = Nothing

    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name = "delStream"
    val serviceName = "TransactionService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val delStream$args = DelStream.Args
  type delStream$args = DelStream.Args

  val delStream$result = DelStream.Result
  type delStream$result = DelStream.Result

  object PutTransaction extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("putTransaction_args")
      val TransactionField = new TField("transaction", TType.STRUCT, 1)
      val TransactionFieldManifest = implicitly[Manifest[transactionService.rpc.Transaction]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TransactionField,
          false,
          false,
          TransactionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          transaction =
            {
              val field = original.transaction
              transactionService.rpc.Transaction.withoutPassthroughFields(field)
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var transaction: transactionService.rpc.Transaction = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    transaction = readTransactionValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'transaction' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          transaction,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        transaction: transactionService.rpc.Transaction
      ): Args =
        new Args(
          transaction
        )
    
      def unapply(_item: Args): _root_.scala.Option[transactionService.rpc.Transaction] = _root_.scala.Some(_item.transaction)
    
    
      @inline private def readTransactionValue(_iprot: TProtocol): transactionService.rpc.Transaction = {
        transactionService.rpc.Transaction.decode(_iprot)
      }
    
      @inline private def writeTransactionField(transaction_item: transactionService.rpc.Transaction, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TransactionField)
        writeTransactionValue(transaction_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTransactionValue(transaction_item: transactionService.rpc.Transaction, _oprot: TProtocol): Unit = {
        transaction_item.write(_oprot)
      }
    
    
    }
    
    class Args(
        val transaction: transactionService.rpc.Transaction,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[transactionService.rpc.Transaction]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        transaction: transactionService.rpc.Transaction
      ) = this(
        transaction,
        Map.empty
      )
    
      def _1 = transaction
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (transaction ne null) writeTransactionField(transaction, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        transaction: transactionService.rpc.Transaction = this.transaction,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          transaction,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.transaction
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Boolean
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("putTransaction_result")
      val SuccessField = new TField("success", TType.BOOL, 0)
      val SuccessFieldManifest = implicitly[Manifest[Boolean]]
      val ErrorField = new TField("error", TType.STRUCT, 1)
      val ErrorFieldManifest = implicitly[Manifest[transactionService.rpc.ServerException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ErrorField,
          true,
          false,
          ErrorFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            },
          error =
            {
              val field = original.error
              field.map { field =>
                transactionService.rpc.ServerException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Boolean] = _root_.scala.None
        var error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.BOOL =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.BOOL
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    error = _root_.scala.Some(readErrorValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'error' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          error,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          error
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Boolean = {
        _iprot.readBool()
      }
    
      @inline private def writeSuccessField(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeBool(success_item)
      }
    
      @inline private def readErrorValue(_iprot: TProtocol): transactionService.rpc.ServerException = {
        transactionService.rpc.ServerException.decode(_iprot)
      }
    
      @inline private def writeErrorField(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ErrorField)
        writeErrorValue(error_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeErrorValue(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        error_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Boolean],
        val error: _root_.scala.Option[transactionService.rpc.ServerException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Boolean] with ThriftStruct
      with _root_.scala.Product2[Option[Boolean], Option[transactionService.rpc.ServerException]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ) = this(
        success,
        error,
        Map.empty
      )
    
      def _1 = success
      def _2 = error
    
      def toTuple: _root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]] = {
        (
          success,
          error
        )
      }
    
      def successField: Option[Boolean] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(error)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (error.isDefined) writeErrorField(error.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Boolean] = this.success,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = this.error,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          error,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.error
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    type FunctionType = Nothing
    type ServiceType = Nothing

    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name = "putTransaction"
    val serviceName = "TransactionService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val putTransaction$args = PutTransaction.Args
  type putTransaction$args = PutTransaction.Args

  val putTransaction$result = PutTransaction.Result
  type putTransaction$result = PutTransaction.Result

  object PutTransactions extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("putTransactions_args")
      val TransactionsField = new TField("transactions", TType.LIST, 1)
      val TransactionsFieldManifest = implicitly[Manifest[Seq[transactionService.rpc.Transaction]]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TransactionsField,
          false,
          false,
          TransactionsFieldManifest,
          _root_.scala.None,
          _root_.scala.Some(implicitly[Manifest[transactionService.rpc.Transaction]]),
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          Some[Seq[transactionService.rpc.Transaction]](Seq[transactionService.rpc.Transaction]())
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          transactions =
            {
              val field = original.transactions
              field.map { field =>
                transactionService.rpc.Transaction.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var transactions: Seq[transactionService.rpc.Transaction] = Seq[transactionService.rpc.Transaction]()
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.LIST =>
                    transactions = readTransactionsValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.LIST
                    throw new TProtocolException(
                      "Received wrong type for field 'transactions' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          transactions,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        transactions: Seq[transactionService.rpc.Transaction] = Seq[transactionService.rpc.Transaction]()
      ): Args =
        new Args(
          transactions
        )
    
      def unapply(_item: Args): _root_.scala.Option[Seq[transactionService.rpc.Transaction]] = _root_.scala.Some(_item.transactions)
    
    
      @inline private def readTransactionsValue(_iprot: TProtocol): Seq[transactionService.rpc.Transaction] = {
        val _list = _iprot.readListBegin()
        if (_list.size == 0) {
          _iprot.readListEnd()
          Nil
        } else {
          val _rv = new mutable$ArrayBuffer[transactionService.rpc.Transaction](_list.size)
          var _i = 0
          while (_i < _list.size) {
            _rv += {
              transactionService.rpc.Transaction.decode(_iprot)
            }
            _i += 1
          }
          _iprot.readListEnd()
          _rv
        }
      }
    
      @inline private def writeTransactionsField(transactions_item: Seq[transactionService.rpc.Transaction], _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TransactionsField)
        writeTransactionsValue(transactions_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTransactionsValue(transactions_item: Seq[transactionService.rpc.Transaction], _oprot: TProtocol): Unit = {
        _oprot.writeListBegin(new TList(TType.STRUCT, transactions_item.size))
        transactions_item match {
          case _: IndexedSeq[_] =>
            var _i = 0
            val _size = transactions_item.size
            while (_i < _size) {
              val transactions_item_element = transactions_item(_i)
              transactions_item_element.write(_oprot)
              _i += 1
            }
          case _ =>
            transactions_item.foreach { transactions_item_element =>
              transactions_item_element.write(_oprot)
            }
        }
        _oprot.writeListEnd()
      }
    
    
    }
    
    class Args(
        val transactions: Seq[transactionService.rpc.Transaction],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[Seq[transactionService.rpc.Transaction]]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        transactions: Seq[transactionService.rpc.Transaction] = Seq[transactionService.rpc.Transaction]()
      ) = this(
        transactions,
        Map.empty
      )
    
      def _1 = transactions
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (transactions ne null) writeTransactionsField(transactions, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        transactions: Seq[transactionService.rpc.Transaction] = this.transactions,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          transactions,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.transactions
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Boolean
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("putTransactions_result")
      val SuccessField = new TField("success", TType.BOOL, 0)
      val SuccessFieldManifest = implicitly[Manifest[Boolean]]
      val ErrorField = new TField("error", TType.STRUCT, 1)
      val ErrorFieldManifest = implicitly[Manifest[transactionService.rpc.ServerException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ErrorField,
          true,
          false,
          ErrorFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            },
          error =
            {
              val field = original.error
              field.map { field =>
                transactionService.rpc.ServerException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Boolean] = _root_.scala.None
        var error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.BOOL =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.BOOL
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    error = _root_.scala.Some(readErrorValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'error' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          error,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          error
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Boolean = {
        _iprot.readBool()
      }
    
      @inline private def writeSuccessField(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeBool(success_item)
      }
    
      @inline private def readErrorValue(_iprot: TProtocol): transactionService.rpc.ServerException = {
        transactionService.rpc.ServerException.decode(_iprot)
      }
    
      @inline private def writeErrorField(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ErrorField)
        writeErrorValue(error_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeErrorValue(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        error_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Boolean],
        val error: _root_.scala.Option[transactionService.rpc.ServerException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Boolean] with ThriftStruct
      with _root_.scala.Product2[Option[Boolean], Option[transactionService.rpc.ServerException]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ) = this(
        success,
        error,
        Map.empty
      )
    
      def _1 = success
      def _2 = error
    
      def toTuple: _root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]] = {
        (
          success,
          error
        )
      }
    
      def successField: Option[Boolean] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(error)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (error.isDefined) writeErrorField(error.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Boolean] = this.success,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = this.error,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          error,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.error
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    type FunctionType = Nothing
    type ServiceType = Nothing

    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name = "putTransactions"
    val serviceName = "TransactionService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val putTransactions$args = PutTransactions.Args
  type putTransactions$args = PutTransactions.Args

  val putTransactions$result = PutTransactions.Result
  type putTransactions$result = PutTransactions.Result

  object ScanTransactions extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("scanTransactions_args")
      val StreamField = new TField("stream", TType.STRING, 1)
      val StreamFieldManifest = implicitly[Manifest[String]]
      val PartitionField = new TField("partition", TType.I32, 2)
      val PartitionFieldManifest = implicitly[Manifest[Int]]
      val FromField = new TField("from", TType.I64, 3)
      val FromFieldManifest = implicitly[Manifest[Long]]
      val ToField = new TField("to", TType.I64, 4)
      val ToFieldManifest = implicitly[Manifest[Long]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          StreamField,
          false,
          false,
          StreamFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          PartitionField,
          false,
          false,
          PartitionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          FromField,
          false,
          false,
          FromFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ToField,
          false,
          false,
          ToFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          stream =
            {
              val field = original.stream
              field
            },
          partition =
            {
              val field = original.partition
              field
            },
          from =
            {
              val field = original.from
              field
            },
          to =
            {
              val field = original.to
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var stream: String = null
        var partition: Int = 0
        var from: Long = 0L
        var to: Long = 0L
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    stream = readStreamValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'stream' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I32 =>
                    partition = readPartitionValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'partition' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.I64 =>
                    from = readFromValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'from' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 4 =>
                _field.`type` match {
                  case TType.I64 =>
                    to = readToValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'to' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          stream,
          partition,
          from,
          to,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        stream: String,
        partition: Int,
        from: Long,
        to: Long
      ): Args =
        new Args(
          stream,
          partition,
          from,
          to
        )
    
      def unapply(_item: Args): _root_.scala.Option[_root_.scala.Tuple4[String, Int, Long, Long]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readStreamValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeStreamField(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(StreamField)
        writeStreamValue(stream_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeStreamValue(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(stream_item)
      }
    
      @inline private def readPartitionValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writePartitionField(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(PartitionField)
        writePartitionValue(partition_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writePartitionValue(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(partition_item)
      }
    
      @inline private def readFromValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeFromField(from_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(FromField)
        writeFromValue(from_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeFromValue(from_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(from_item)
      }
    
      @inline private def readToValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeToField(to_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ToField)
        writeToValue(to_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeToValue(to_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(to_item)
      }
    
    
    }
    
    class Args(
        val stream: String,
        val partition: Int,
        val from: Long,
        val to: Long,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product4[String, Int, Long, Long]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        stream: String,
        partition: Int,
        from: Long,
        to: Long
      ) = this(
        stream,
        partition,
        from,
        to,
        Map.empty
      )
    
      def _1 = stream
      def _2 = partition
      def _3 = from
      def _4 = to
    
      def toTuple: _root_.scala.Tuple4[String, Int, Long, Long] = {
        (
          stream,
          partition,
          from,
          to
        )
      }
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (stream ne null) writeStreamField(stream, _oprot)
        writePartitionField(partition, _oprot)
        writeFromField(from, _oprot)
        writeToField(to, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        stream: String = this.stream,
        partition: Int = this.partition,
        from: Long = this.from,
        to: Long = this.to,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          stream,
          partition,
          from,
          to,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 4
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.stream
        case 1 => this.partition
        case 2 => this.from
        case 3 => this.to
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Seq[transactionService.rpc.ProducerTransaction]
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("scanTransactions_result")
      val SuccessField = new TField("success", TType.LIST, 0)
      val SuccessFieldManifest = implicitly[Manifest[Seq[transactionService.rpc.ProducerTransaction]]]
      val ErrorField = new TField("error", TType.STRUCT, 1)
      val ErrorFieldManifest = implicitly[Manifest[transactionService.rpc.ServerException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.Some(implicitly[Manifest[transactionService.rpc.ProducerTransaction]]),
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ErrorField,
          true,
          false,
          ErrorFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field.map { field =>
                  transactionService.rpc.ProducerTransaction.withoutPassthroughFields(field)
                }
              }
            },
          error =
            {
              val field = original.error
              field.map { field =>
                transactionService.rpc.ServerException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Seq[transactionService.rpc.ProducerTransaction]] = _root_.scala.None
        var error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.LIST =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.LIST
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    error = _root_.scala.Some(readErrorValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'error' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          error,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Seq[transactionService.rpc.ProducerTransaction]] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          error
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Tuple2[Option[Seq[transactionService.rpc.ProducerTransaction]], Option[transactionService.rpc.ServerException]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Seq[transactionService.rpc.ProducerTransaction] = {
        val _list = _iprot.readListBegin()
        if (_list.size == 0) {
          _iprot.readListEnd()
          Nil
        } else {
          val _rv = new mutable$ArrayBuffer[transactionService.rpc.ProducerTransaction](_list.size)
          var _i = 0
          while (_i < _list.size) {
            _rv += {
              transactionService.rpc.ProducerTransaction.decode(_iprot)
            }
            _i += 1
          }
          _iprot.readListEnd()
          _rv
        }
      }
    
      @inline private def writeSuccessField(success_item: Seq[transactionService.rpc.ProducerTransaction], _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Seq[transactionService.rpc.ProducerTransaction], _oprot: TProtocol): Unit = {
        _oprot.writeListBegin(new TList(TType.STRUCT, success_item.size))
        success_item match {
          case _: IndexedSeq[_] =>
            var _i = 0
            val _size = success_item.size
            while (_i < _size) {
              val success_item_element = success_item(_i)
              success_item_element.write(_oprot)
              _i += 1
            }
          case _ =>
            success_item.foreach { success_item_element =>
              success_item_element.write(_oprot)
            }
        }
        _oprot.writeListEnd()
      }
    
      @inline private def readErrorValue(_iprot: TProtocol): transactionService.rpc.ServerException = {
        transactionService.rpc.ServerException.decode(_iprot)
      }
    
      @inline private def writeErrorField(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ErrorField)
        writeErrorValue(error_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeErrorValue(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        error_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Seq[transactionService.rpc.ProducerTransaction]],
        val error: _root_.scala.Option[transactionService.rpc.ServerException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Seq[transactionService.rpc.ProducerTransaction]] with ThriftStruct
      with _root_.scala.Product2[Option[Seq[transactionService.rpc.ProducerTransaction]], Option[transactionService.rpc.ServerException]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Seq[transactionService.rpc.ProducerTransaction]] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ) = this(
        success,
        error,
        Map.empty
      )
    
      def _1 = success
      def _2 = error
    
      def toTuple: _root_.scala.Tuple2[Option[Seq[transactionService.rpc.ProducerTransaction]], Option[transactionService.rpc.ServerException]] = {
        (
          success,
          error
        )
      }
    
      def successField: Option[Seq[transactionService.rpc.ProducerTransaction]] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(error)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (error.isDefined) writeErrorField(error.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Seq[transactionService.rpc.ProducerTransaction]] = this.success,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = this.error,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          error,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.error
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    type FunctionType = Nothing
    type ServiceType = Nothing

    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name = "scanTransactions"
    val serviceName = "TransactionService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val scanTransactions$args = ScanTransactions.Args
  type scanTransactions$args = ScanTransactions.Args

  val scanTransactions$result = ScanTransactions.Result
  type scanTransactions$result = ScanTransactions.Result

  object PutTransactionData extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("putTransactionData_args")
      val StreamField = new TField("stream", TType.STRING, 1)
      val StreamFieldManifest = implicitly[Manifest[String]]
      val PartitionField = new TField("partition", TType.I32, 2)
      val PartitionFieldManifest = implicitly[Manifest[Int]]
      val TransactionField = new TField("transaction", TType.I64, 3)
      val TransactionFieldManifest = implicitly[Manifest[Long]]
      val DataField = new TField("data", TType.LIST, 4)
      val DataFieldManifest = implicitly[Manifest[Seq[ByteBuffer]]]
      val FromField = new TField("from", TType.I32, 5)
      val FromFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          StreamField,
          false,
          false,
          StreamFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          PartitionField,
          false,
          false,
          PartitionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          TransactionField,
          false,
          false,
          TransactionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          DataField,
          false,
          false,
          DataFieldManifest,
          _root_.scala.None,
          _root_.scala.Some(implicitly[Manifest[ByteBuffer]]),
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          Some[Seq[ByteBuffer]](Seq[ByteBuffer]())
        ),
        new ThriftStructFieldInfo(
          FromField,
          false,
          false,
          FromFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          stream =
            {
              val field = original.stream
              field
            },
          partition =
            {
              val field = original.partition
              field
            },
          transaction =
            {
              val field = original.transaction
              field
            },
          data =
            {
              val field = original.data
              field.map { field =>
                field
              }
            },
          from =
            {
              val field = original.from
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var stream: String = null
        var partition: Int = 0
        var transaction: Long = 0L
        var data: Seq[ByteBuffer] = Seq[ByteBuffer]()
        var from: Int = 0
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    stream = readStreamValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'stream' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I32 =>
                    partition = readPartitionValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'partition' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.I64 =>
                    transaction = readTransactionValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'transaction' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 4 =>
                _field.`type` match {
                  case TType.LIST =>
                    data = readDataValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.LIST
                    throw new TProtocolException(
                      "Received wrong type for field 'data' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 5 =>
                _field.`type` match {
                  case TType.I32 =>
                    from = readFromValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'from' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          stream,
          partition,
          transaction,
          data,
          from,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        stream: String,
        partition: Int,
        transaction: Long,
        data: Seq[ByteBuffer] = Seq[ByteBuffer](),
        from: Int
      ): Args =
        new Args(
          stream,
          partition,
          transaction,
          data,
          from
        )
    
      def unapply(_item: Args): _root_.scala.Option[_root_.scala.Tuple5[String, Int, Long, Seq[ByteBuffer], Int]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readStreamValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeStreamField(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(StreamField)
        writeStreamValue(stream_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeStreamValue(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(stream_item)
      }
    
      @inline private def readPartitionValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writePartitionField(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(PartitionField)
        writePartitionValue(partition_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writePartitionValue(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(partition_item)
      }
    
      @inline private def readTransactionValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeTransactionField(transaction_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TransactionField)
        writeTransactionValue(transaction_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTransactionValue(transaction_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(transaction_item)
      }
    
      @inline private def readDataValue(_iprot: TProtocol): Seq[ByteBuffer] = {
        val _list = _iprot.readListBegin()
        if (_list.size == 0) {
          _iprot.readListEnd()
          Nil
        } else {
          val _rv = new mutable$ArrayBuffer[ByteBuffer](_list.size)
          var _i = 0
          while (_i < _list.size) {
            _rv += {
              _iprot.readBinary()
            }
            _i += 1
          }
          _iprot.readListEnd()
          _rv
        }
      }
    
      @inline private def writeDataField(data_item: Seq[ByteBuffer], _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(DataField)
        writeDataValue(data_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeDataValue(data_item: Seq[ByteBuffer], _oprot: TProtocol): Unit = {
        _oprot.writeListBegin(new TList(TType.STRING, data_item.size))
        data_item match {
          case _: IndexedSeq[_] =>
            var _i = 0
            val _size = data_item.size
            while (_i < _size) {
              val data_item_element = data_item(_i)
              _oprot.writeBinary(data_item_element)
              _i += 1
            }
          case _ =>
            data_item.foreach { data_item_element =>
              _oprot.writeBinary(data_item_element)
            }
        }
        _oprot.writeListEnd()
      }
    
      @inline private def readFromValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeFromField(from_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(FromField)
        writeFromValue(from_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeFromValue(from_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(from_item)
      }
    
    
    }
    
    class Args(
        val stream: String,
        val partition: Int,
        val transaction: Long,
        val data: Seq[ByteBuffer],
        val from: Int,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product5[String, Int, Long, Seq[ByteBuffer], Int]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        stream: String,
        partition: Int,
        transaction: Long,
        data: Seq[ByteBuffer] = Seq[ByteBuffer](),
        from: Int
      ) = this(
        stream,
        partition,
        transaction,
        data,
        from,
        Map.empty
      )
    
      def _1 = stream
      def _2 = partition
      def _3 = transaction
      def _4 = data
      def _5 = from
    
      def toTuple: _root_.scala.Tuple5[String, Int, Long, Seq[ByteBuffer], Int] = {
        (
          stream,
          partition,
          transaction,
          data,
          from
        )
      }
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (stream ne null) writeStreamField(stream, _oprot)
        writePartitionField(partition, _oprot)
        writeTransactionField(transaction, _oprot)
        if (data ne null) writeDataField(data, _oprot)
        writeFromField(from, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        stream: String = this.stream,
        partition: Int = this.partition,
        transaction: Long = this.transaction,
        data: Seq[ByteBuffer] = this.data,
        from: Int = this.from,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          stream,
          partition,
          transaction,
          data,
          from,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 5
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.stream
        case 1 => this.partition
        case 2 => this.transaction
        case 3 => this.data
        case 4 => this.from
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Boolean
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("putTransactionData_result")
      val SuccessField = new TField("success", TType.BOOL, 0)
      val SuccessFieldManifest = implicitly[Manifest[Boolean]]
      val ErrorField = new TField("error", TType.STRUCT, 1)
      val ErrorFieldManifest = implicitly[Manifest[transactionService.rpc.ServerException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ErrorField,
          true,
          false,
          ErrorFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            },
          error =
            {
              val field = original.error
              field.map { field =>
                transactionService.rpc.ServerException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Boolean] = _root_.scala.None
        var error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.BOOL =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.BOOL
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    error = _root_.scala.Some(readErrorValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'error' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          error,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          error
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Boolean = {
        _iprot.readBool()
      }
    
      @inline private def writeSuccessField(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeBool(success_item)
      }
    
      @inline private def readErrorValue(_iprot: TProtocol): transactionService.rpc.ServerException = {
        transactionService.rpc.ServerException.decode(_iprot)
      }
    
      @inline private def writeErrorField(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ErrorField)
        writeErrorValue(error_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeErrorValue(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        error_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Boolean],
        val error: _root_.scala.Option[transactionService.rpc.ServerException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Boolean] with ThriftStruct
      with _root_.scala.Product2[Option[Boolean], Option[transactionService.rpc.ServerException]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ) = this(
        success,
        error,
        Map.empty
      )
    
      def _1 = success
      def _2 = error
    
      def toTuple: _root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]] = {
        (
          success,
          error
        )
      }
    
      def successField: Option[Boolean] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(error)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (error.isDefined) writeErrorField(error.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Boolean] = this.success,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = this.error,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          error,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.error
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    type FunctionType = Nothing
    type ServiceType = Nothing

    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name = "putTransactionData"
    val serviceName = "TransactionService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val putTransactionData$args = PutTransactionData.Args
  type putTransactionData$args = PutTransactionData.Args

  val putTransactionData$result = PutTransactionData.Result
  type putTransactionData$result = PutTransactionData.Result

  object GetTransactionData extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getTransactionData_args")
      val StreamField = new TField("stream", TType.STRING, 1)
      val StreamFieldManifest = implicitly[Manifest[String]]
      val PartitionField = new TField("partition", TType.I32, 2)
      val PartitionFieldManifest = implicitly[Manifest[Int]]
      val TransactionField = new TField("transaction", TType.I64, 3)
      val TransactionFieldManifest = implicitly[Manifest[Long]]
      val FromField = new TField("from", TType.I32, 4)
      val FromFieldManifest = implicitly[Manifest[Int]]
      val ToField = new TField("to", TType.I32, 5)
      val ToFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          StreamField,
          false,
          false,
          StreamFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          PartitionField,
          false,
          false,
          PartitionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          TransactionField,
          false,
          false,
          TransactionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          FromField,
          false,
          false,
          FromFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ToField,
          false,
          false,
          ToFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          stream =
            {
              val field = original.stream
              field
            },
          partition =
            {
              val field = original.partition
              field
            },
          transaction =
            {
              val field = original.transaction
              field
            },
          from =
            {
              val field = original.from
              field
            },
          to =
            {
              val field = original.to
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var stream: String = null
        var partition: Int = 0
        var transaction: Long = 0L
        var from: Int = 0
        var to: Int = 0
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    stream = readStreamValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'stream' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I32 =>
                    partition = readPartitionValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'partition' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.I64 =>
                    transaction = readTransactionValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'transaction' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 4 =>
                _field.`type` match {
                  case TType.I32 =>
                    from = readFromValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'from' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 5 =>
                _field.`type` match {
                  case TType.I32 =>
                    to = readToValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'to' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          stream,
          partition,
          transaction,
          from,
          to,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        stream: String,
        partition: Int,
        transaction: Long,
        from: Int,
        to: Int
      ): Args =
        new Args(
          stream,
          partition,
          transaction,
          from,
          to
        )
    
      def unapply(_item: Args): _root_.scala.Option[_root_.scala.Tuple5[String, Int, Long, Int, Int]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readStreamValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeStreamField(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(StreamField)
        writeStreamValue(stream_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeStreamValue(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(stream_item)
      }
    
      @inline private def readPartitionValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writePartitionField(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(PartitionField)
        writePartitionValue(partition_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writePartitionValue(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(partition_item)
      }
    
      @inline private def readTransactionValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeTransactionField(transaction_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TransactionField)
        writeTransactionValue(transaction_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTransactionValue(transaction_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(transaction_item)
      }
    
      @inline private def readFromValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeFromField(from_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(FromField)
        writeFromValue(from_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeFromValue(from_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(from_item)
      }
    
      @inline private def readToValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeToField(to_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ToField)
        writeToValue(to_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeToValue(to_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(to_item)
      }
    
    
    }
    
    class Args(
        val stream: String,
        val partition: Int,
        val transaction: Long,
        val from: Int,
        val to: Int,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product5[String, Int, Long, Int, Int]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        stream: String,
        partition: Int,
        transaction: Long,
        from: Int,
        to: Int
      ) = this(
        stream,
        partition,
        transaction,
        from,
        to,
        Map.empty
      )
    
      def _1 = stream
      def _2 = partition
      def _3 = transaction
      def _4 = from
      def _5 = to
    
      def toTuple: _root_.scala.Tuple5[String, Int, Long, Int, Int] = {
        (
          stream,
          partition,
          transaction,
          from,
          to
        )
      }
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (stream ne null) writeStreamField(stream, _oprot)
        writePartitionField(partition, _oprot)
        writeTransactionField(transaction, _oprot)
        writeFromField(from, _oprot)
        writeToField(to, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        stream: String = this.stream,
        partition: Int = this.partition,
        transaction: Long = this.transaction,
        from: Int = this.from,
        to: Int = this.to,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          stream,
          partition,
          transaction,
          from,
          to,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 5
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.stream
        case 1 => this.partition
        case 2 => this.transaction
        case 3 => this.from
        case 4 => this.to
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Seq[ByteBuffer]
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getTransactionData_result")
      val SuccessField = new TField("success", TType.LIST, 0)
      val SuccessFieldManifest = implicitly[Manifest[Seq[ByteBuffer]]]
      val ErrorField = new TField("error", TType.STRUCT, 1)
      val ErrorFieldManifest = implicitly[Manifest[transactionService.rpc.ServerException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.Some(implicitly[Manifest[ByteBuffer]]),
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ErrorField,
          true,
          false,
          ErrorFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field.map { field =>
                  field
                }
              }
            },
          error =
            {
              val field = original.error
              field.map { field =>
                transactionService.rpc.ServerException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Seq[ByteBuffer]] = _root_.scala.None
        var error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.LIST =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.LIST
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    error = _root_.scala.Some(readErrorValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'error' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          error,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Seq[ByteBuffer]] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          error
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Tuple2[Option[Seq[ByteBuffer]], Option[transactionService.rpc.ServerException]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Seq[ByteBuffer] = {
        val _list = _iprot.readListBegin()
        if (_list.size == 0) {
          _iprot.readListEnd()
          Nil
        } else {
          val _rv = new mutable$ArrayBuffer[ByteBuffer](_list.size)
          var _i = 0
          while (_i < _list.size) {
            _rv += {
              _iprot.readBinary()
            }
            _i += 1
          }
          _iprot.readListEnd()
          _rv
        }
      }
    
      @inline private def writeSuccessField(success_item: Seq[ByteBuffer], _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Seq[ByteBuffer], _oprot: TProtocol): Unit = {
        _oprot.writeListBegin(new TList(TType.STRING, success_item.size))
        success_item match {
          case _: IndexedSeq[_] =>
            var _i = 0
            val _size = success_item.size
            while (_i < _size) {
              val success_item_element = success_item(_i)
              _oprot.writeBinary(success_item_element)
              _i += 1
            }
          case _ =>
            success_item.foreach { success_item_element =>
              _oprot.writeBinary(success_item_element)
            }
        }
        _oprot.writeListEnd()
      }
    
      @inline private def readErrorValue(_iprot: TProtocol): transactionService.rpc.ServerException = {
        transactionService.rpc.ServerException.decode(_iprot)
      }
    
      @inline private def writeErrorField(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ErrorField)
        writeErrorValue(error_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeErrorValue(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        error_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Seq[ByteBuffer]],
        val error: _root_.scala.Option[transactionService.rpc.ServerException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Seq[ByteBuffer]] with ThriftStruct
      with _root_.scala.Product2[Option[Seq[ByteBuffer]], Option[transactionService.rpc.ServerException]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Seq[ByteBuffer]] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ) = this(
        success,
        error,
        Map.empty
      )
    
      def _1 = success
      def _2 = error
    
      def toTuple: _root_.scala.Tuple2[Option[Seq[ByteBuffer]], Option[transactionService.rpc.ServerException]] = {
        (
          success,
          error
        )
      }
    
      def successField: Option[Seq[ByteBuffer]] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(error)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (error.isDefined) writeErrorField(error.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Seq[ByteBuffer]] = this.success,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = this.error,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          error,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.error
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    type FunctionType = Nothing
    type ServiceType = Nothing

    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name = "getTransactionData"
    val serviceName = "TransactionService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val getTransactionData$args = GetTransactionData.Args
  type getTransactionData$args = GetTransactionData.Args

  val getTransactionData$result = GetTransactionData.Result
  type getTransactionData$result = GetTransactionData.Result

  object SetConsumerState extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("setConsumerState_args")
      val NameField = new TField("name", TType.STRING, 1)
      val NameFieldManifest = implicitly[Manifest[String]]
      val StreamField = new TField("stream", TType.STRING, 2)
      val StreamFieldManifest = implicitly[Manifest[String]]
      val PartitionField = new TField("partition", TType.I32, 3)
      val PartitionFieldManifest = implicitly[Manifest[Int]]
      val TransactionField = new TField("transaction", TType.I64, 4)
      val TransactionFieldManifest = implicitly[Manifest[Long]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          NameField,
          false,
          false,
          NameFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          StreamField,
          false,
          false,
          StreamFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          PartitionField,
          false,
          false,
          PartitionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          TransactionField,
          false,
          false,
          TransactionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          name =
            {
              val field = original.name
              field
            },
          stream =
            {
              val field = original.stream
              field
            },
          partition =
            {
              val field = original.partition
              field
            },
          transaction =
            {
              val field = original.transaction
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var name: String = null
        var stream: String = null
        var partition: Int = 0
        var transaction: Long = 0L
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    name = readNameValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRING =>
                    stream = readStreamValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'stream' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.I32 =>
                    partition = readPartitionValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'partition' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 4 =>
                _field.`type` match {
                  case TType.I64 =>
                    transaction = readTransactionValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'transaction' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          name,
          stream,
          partition,
          transaction,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        name: String,
        stream: String,
        partition: Int,
        transaction: Long
      ): Args =
        new Args(
          name,
          stream,
          partition,
          transaction
        )
    
      def unapply(_item: Args): _root_.scala.Option[_root_.scala.Tuple4[String, String, Int, Long]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readNameValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeNameField(name_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(NameField)
        writeNameValue(name_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeNameValue(name_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(name_item)
      }
    
      @inline private def readStreamValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeStreamField(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(StreamField)
        writeStreamValue(stream_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeStreamValue(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(stream_item)
      }
    
      @inline private def readPartitionValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writePartitionField(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(PartitionField)
        writePartitionValue(partition_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writePartitionValue(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(partition_item)
      }
    
      @inline private def readTransactionValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeTransactionField(transaction_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TransactionField)
        writeTransactionValue(transaction_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTransactionValue(transaction_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(transaction_item)
      }
    
    
    }
    
    class Args(
        val name: String,
        val stream: String,
        val partition: Int,
        val transaction: Long,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product4[String, String, Int, Long]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        name: String,
        stream: String,
        partition: Int,
        transaction: Long
      ) = this(
        name,
        stream,
        partition,
        transaction,
        Map.empty
      )
    
      def _1 = name
      def _2 = stream
      def _3 = partition
      def _4 = transaction
    
      def toTuple: _root_.scala.Tuple4[String, String, Int, Long] = {
        (
          name,
          stream,
          partition,
          transaction
        )
      }
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (name ne null) writeNameField(name, _oprot)
        if (stream ne null) writeStreamField(stream, _oprot)
        writePartitionField(partition, _oprot)
        writeTransactionField(transaction, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        name: String = this.name,
        stream: String = this.stream,
        partition: Int = this.partition,
        transaction: Long = this.transaction,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          name,
          stream,
          partition,
          transaction,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 4
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.name
        case 1 => this.stream
        case 2 => this.partition
        case 3 => this.transaction
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Boolean
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("setConsumerState_result")
      val SuccessField = new TField("success", TType.BOOL, 0)
      val SuccessFieldManifest = implicitly[Manifest[Boolean]]
      val ErrorField = new TField("error", TType.STRUCT, 1)
      val ErrorFieldManifest = implicitly[Manifest[transactionService.rpc.ServerException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ErrorField,
          true,
          false,
          ErrorFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            },
          error =
            {
              val field = original.error
              field.map { field =>
                transactionService.rpc.ServerException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Boolean] = _root_.scala.None
        var error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.BOOL =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.BOOL
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    error = _root_.scala.Some(readErrorValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'error' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          error,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          error
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Boolean = {
        _iprot.readBool()
      }
    
      @inline private def writeSuccessField(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeBool(success_item)
      }
    
      @inline private def readErrorValue(_iprot: TProtocol): transactionService.rpc.ServerException = {
        transactionService.rpc.ServerException.decode(_iprot)
      }
    
      @inline private def writeErrorField(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ErrorField)
        writeErrorValue(error_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeErrorValue(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        error_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Boolean],
        val error: _root_.scala.Option[transactionService.rpc.ServerException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Boolean] with ThriftStruct
      with _root_.scala.Product2[Option[Boolean], Option[transactionService.rpc.ServerException]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Boolean] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ) = this(
        success,
        error,
        Map.empty
      )
    
      def _1 = success
      def _2 = error
    
      def toTuple: _root_.scala.Tuple2[Option[Boolean], Option[transactionService.rpc.ServerException]] = {
        (
          success,
          error
        )
      }
    
      def successField: Option[Boolean] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(error)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (error.isDefined) writeErrorField(error.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Boolean] = this.success,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = this.error,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          error,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.error
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    type FunctionType = Nothing
    type ServiceType = Nothing

    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name = "setConsumerState"
    val serviceName = "TransactionService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val setConsumerState$args = SetConsumerState.Args
  type setConsumerState$args = SetConsumerState.Args

  val setConsumerState$result = SetConsumerState.Result
  type setConsumerState$result = SetConsumerState.Result

  object GetConsumerState extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getConsumerState_args")
      val NameField = new TField("name", TType.STRING, 1)
      val NameFieldManifest = implicitly[Manifest[String]]
      val StreamField = new TField("stream", TType.STRING, 2)
      val StreamFieldManifest = implicitly[Manifest[String]]
      val PartitionField = new TField("partition", TType.I32, 3)
      val PartitionFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          NameField,
          false,
          false,
          NameFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          StreamField,
          false,
          false,
          StreamFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          PartitionField,
          false,
          false,
          PartitionFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          name =
            {
              val field = original.name
              field
            },
          stream =
            {
              val field = original.stream
              field
            },
          partition =
            {
              val field = original.partition
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var name: String = null
        var stream: String = null
        var partition: Int = 0
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    name = readNameValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRING =>
                    stream = readStreamValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'stream' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.I32 =>
                    partition = readPartitionValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'partition' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          name,
          stream,
          partition,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        name: String,
        stream: String,
        partition: Int
      ): Args =
        new Args(
          name,
          stream,
          partition
        )
    
      def unapply(_item: Args): _root_.scala.Option[_root_.scala.Tuple3[String, String, Int]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readNameValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeNameField(name_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(NameField)
        writeNameValue(name_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeNameValue(name_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(name_item)
      }
    
      @inline private def readStreamValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeStreamField(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(StreamField)
        writeStreamValue(stream_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeStreamValue(stream_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(stream_item)
      }
    
      @inline private def readPartitionValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writePartitionField(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(PartitionField)
        writePartitionValue(partition_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writePartitionValue(partition_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(partition_item)
      }
    
    
    }
    
    class Args(
        val name: String,
        val stream: String,
        val partition: Int,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product3[String, String, Int]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        name: String,
        stream: String,
        partition: Int
      ) = this(
        name,
        stream,
        partition,
        Map.empty
      )
    
      def _1 = name
      def _2 = stream
      def _3 = partition
    
      def toTuple: _root_.scala.Tuple3[String, String, Int] = {
        (
          name,
          stream,
          partition
        )
      }
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (name ne null) writeNameField(name, _oprot)
        if (stream ne null) writeStreamField(stream, _oprot)
        writePartitionField(partition, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        name: String = this.name,
        stream: String = this.stream,
        partition: Int = this.partition,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          name,
          stream,
          partition,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 3
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.name
        case 1 => this.stream
        case 2 => this.partition
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Long
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getConsumerState_result")
      val SuccessField = new TField("success", TType.I64, 0)
      val SuccessFieldManifest = implicitly[Manifest[Long]]
      val ErrorField = new TField("error", TType.STRUCT, 1)
      val ErrorFieldManifest = implicitly[Manifest[transactionService.rpc.ServerException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          ErrorField,
          true,
          false,
          ErrorFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            },
          error =
            {
              val field = original.error
              field.map { field =>
                transactionService.rpc.ServerException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Long] = _root_.scala.None
        var error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.I64 =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    error = _root_.scala.Some(readErrorValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'error' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          error,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Long] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          error
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Tuple2[Option[Long], Option[transactionService.rpc.ServerException]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeSuccessField(success_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(success_item)
      }
    
      @inline private def readErrorValue(_iprot: TProtocol): transactionService.rpc.ServerException = {
        transactionService.rpc.ServerException.decode(_iprot)
      }
    
      @inline private def writeErrorField(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ErrorField)
        writeErrorValue(error_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeErrorValue(error_item: transactionService.rpc.ServerException, _oprot: TProtocol): Unit = {
        error_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Long],
        val error: _root_.scala.Option[transactionService.rpc.ServerException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Long] with ThriftStruct
      with _root_.scala.Product2[Option[Long], Option[transactionService.rpc.ServerException]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Long] = _root_.scala.None,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = _root_.scala.None
      ) = this(
        success,
        error,
        Map.empty
      )
    
      def _1 = success
      def _2 = error
    
      def toTuple: _root_.scala.Tuple2[Option[Long], Option[transactionService.rpc.ServerException]] = {
        (
          success,
          error
        )
      }
    
      def successField: Option[Long] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(error)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (error.isDefined) writeErrorField(error.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Long] = this.success,
        error: _root_.scala.Option[transactionService.rpc.ServerException] = this.error,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          error,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.error
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    type FunctionType = Nothing
    type ServiceType = Nothing

    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name = "getConsumerState"
    val serviceName = "TransactionService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val getConsumerState$args = GetConsumerState.Args
  type getConsumerState$args = GetConsumerState.Args

  val getConsumerState$result = GetConsumerState.Result
  type getConsumerState$result = GetConsumerState.Result

  object Authenticate extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("authenticate_args")
      val AuthKeyField = new TField("authKey", TType.STRING, 1)
      val AuthKeyFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          AuthKeyField,
          false,
          false,
          AuthKeyFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          authKey =
            {
              val field = original.authKey
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var authKey: String = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    authKey = readAuthKeyValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'authKey' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          authKey,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        authKey: String
      ): Args =
        new Args(
          authKey
        )
    
      def unapply(_item: Args): _root_.scala.Option[String] = _root_.scala.Some(_item.authKey)
    
    
      @inline private def readAuthKeyValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeAuthKeyField(authKey_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(AuthKeyField)
        writeAuthKeyValue(authKey_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeAuthKeyValue(authKey_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(authKey_item)
      }
    
    
    }
    
    class Args(
        val authKey: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[String]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        authKey: String
      ) = this(
        authKey,
        Map.empty
      )
    
      def _1 = authKey
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (authKey ne null) writeAuthKeyField(authKey, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        authKey: String = this.authKey,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          authKey,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.authKey
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = transactionService.rpc.AuthInfo
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("authenticate_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[transactionService.rpc.AuthInfo]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                transactionService.rpc.AuthInfo.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[transactionService.rpc.AuthInfo] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[transactionService.rpc.AuthInfo] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[transactionService.rpc.AuthInfo]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): transactionService.rpc.AuthInfo = {
        transactionService.rpc.AuthInfo.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: transactionService.rpc.AuthInfo, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: transactionService.rpc.AuthInfo, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[transactionService.rpc.AuthInfo],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[transactionService.rpc.AuthInfo] with ThriftStruct
      with _root_.scala.Product1[Option[transactionService.rpc.AuthInfo]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[transactionService.rpc.AuthInfo] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[transactionService.rpc.AuthInfo] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[transactionService.rpc.AuthInfo] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    type FunctionType = Nothing
    type ServiceType = Nothing

    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name = "authenticate"
    val serviceName = "TransactionService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val authenticate$args = Authenticate.Args
  type authenticate$args = Authenticate.Args

  val authenticate$result = Authenticate.Result
  type authenticate$result = Authenticate.Result

  object IsValid extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("isValid_args")
      val TokenField = new TField("token", TType.I32, 1)
      val TokenFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TokenField,
          false,
          false,
          TokenFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          token =
            {
              val field = original.token
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var token: Int = 0
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.I32 =>
                    token = readTokenValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'token' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          token,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        token: Int
      ): Args =
        new Args(
          token
        )
    
      def unapply(_item: Args): _root_.scala.Option[Int] = _root_.scala.Some(_item.token)
    
    
      @inline private def readTokenValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeTokenField(token_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TokenField)
        writeTokenValue(token_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTokenValue(token_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(token_item)
      }
    
    
    }
    
    class Args(
        val token: Int,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[Int]
      with HasThriftStructCodec3[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        token: Int
      ) = this(
        token,
        Map.empty
      )
    
      def _1 = token
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        writeTokenField(token, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        token: Int = this.token,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          token,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.token
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ThriftStructCodec3[Args] = Args
    }

    type SuccessType = Boolean
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("isValid_result")
      val SuccessField = new TField("success", TType.BOOL, 0)
      val SuccessFieldManifest = implicitly[Manifest[Boolean]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Boolean] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.BOOL =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.BOOL
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Boolean] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[Boolean]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Boolean = {
        _iprot.readBool()
      }
    
      @inline private def writeSuccessField(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeBool(success_item)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Boolean],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Boolean] with ThriftStruct
      with _root_.scala.Product1[Option[Boolean]]
      with HasThriftStructCodec3[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Boolean] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[Boolean] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Boolean] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ThriftStructCodec3[Result] = Result
    }

    type FunctionType = Nothing
    type ServiceType = Nothing

    def functionToService(f: FunctionType): ServiceType = ???
    def serviceToFunction(svc: ServiceType): FunctionType = ???

    val name = "isValid"
    val serviceName = "TransactionService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val isValid$args = IsValid.Args
  type isValid$args = IsValid.Args

  val isValid$result = IsValid.Result
  type isValid$result = IsValid.Result


}