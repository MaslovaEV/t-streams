/**
 * Generated by Scrooge
 *   version: 4.14.0
 *   rev: 56cc6a6ed000a14f1a3fef4e3e5e60dab4478499
 *   built at: 20170203-164626
 */
package transactionService.rpc

import com.twitter.scrooge.{
  HasThriftStructCodec3,
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object ResponseScanTransactions extends ThriftStructCodec3[ResponseScanTransactions] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("ResponseScanTransactions")
  val ProducerTransactionsField = new TField("producerTransactions", TType.LIST, 1)
  val ProducerTransactionsFieldManifest = implicitly[Manifest[Seq[transactionService.rpc.ProducerTransaction]]]
  val IsResponseCompletedField = new TField("isResponseCompleted", TType.BOOL, 2)
  val IsResponseCompletedFieldManifest = implicitly[Manifest[Boolean]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      ProducerTransactionsField,
      false,
      true,
      ProducerTransactionsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[transactionService.rpc.ProducerTransaction]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[Seq[transactionService.rpc.ProducerTransaction]](Seq[transactionService.rpc.ProducerTransaction]())
    ),
    new ThriftStructFieldInfo(
      IsResponseCompletedField,
      false,
      true,
      IsResponseCompletedFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: ResponseScanTransactions): Unit = {
    if (_item.producerTransactions == null) throw new TProtocolException("Required field producerTransactions cannot be null")
  }

  def withoutPassthroughFields(original: ResponseScanTransactions): ResponseScanTransactions =
    new Immutable(
      producerTransactions =
        {
          val field = original.producerTransactions
          field.map { field =>
            transactionService.rpc.ProducerTransaction.withoutPassthroughFields(field)
          }
        },
      isResponseCompleted =
        {
          val field = original.isResponseCompleted
          field
        }
    )

  override def encode(_item: ResponseScanTransactions, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): ResponseScanTransactions = {

    var producerTransactions: Seq[transactionService.rpc.ProducerTransaction] = Seq[transactionService.rpc.ProducerTransaction]()
    var _got_producerTransactions = false
    var isResponseCompleted: Boolean = false
    var _got_isResponseCompleted = false

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.LIST =>
    
                producerTransactions = readProducerTransactionsValue(_iprot)
                _got_producerTransactions = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'producerTransactions' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.BOOL =>
    
                isResponseCompleted = readIsResponseCompletedValue(_iprot)
                _got_isResponseCompleted = true
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'isResponseCompleted' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_producerTransactions) throw new TProtocolException("Required field 'producerTransactions' was not found in serialized data for struct ResponseScanTransactions")
    if (!_got_isResponseCompleted) throw new TProtocolException("Required field 'isResponseCompleted' was not found in serialized data for struct ResponseScanTransactions")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      producerTransactions,
      isResponseCompleted,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): ResponseScanTransactions =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): ResponseScanTransactions = {
    var producerTransactions: Seq[transactionService.rpc.ProducerTransaction] = Seq[transactionService.rpc.ProducerTransaction]()
    var _got_producerTransactions = false
    var isResponseCompleted: Boolean = false
    var _got_isResponseCompleted = false
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.LIST =>
                producerTransactions = readProducerTransactionsValue(_iprot)
                _got_producerTransactions = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'producerTransactions' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.BOOL =>
                isResponseCompleted = readIsResponseCompletedValue(_iprot)
                _got_isResponseCompleted = true
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'isResponseCompleted' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_producerTransactions) throw new TProtocolException("Required field 'producerTransactions' was not found in serialized data for struct ResponseScanTransactions")
    if (!_got_isResponseCompleted) throw new TProtocolException("Required field 'isResponseCompleted' was not found in serialized data for struct ResponseScanTransactions")
    new Immutable(
      producerTransactions,
      isResponseCompleted,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    producerTransactions: Seq[transactionService.rpc.ProducerTransaction] = Seq[transactionService.rpc.ProducerTransaction](),
    isResponseCompleted: Boolean
  ): ResponseScanTransactions =
    new Immutable(
      producerTransactions,
      isResponseCompleted
    )

  def unapply(_item: ResponseScanTransactions): _root_.scala.Option[_root_.scala.Tuple2[Seq[transactionService.rpc.ProducerTransaction], Boolean]] = _root_.scala.Some(_item.toTuple)


  @inline private def readProducerTransactionsValue(_iprot: TProtocol): Seq[transactionService.rpc.ProducerTransaction] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[transactionService.rpc.ProducerTransaction](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          transactionService.rpc.ProducerTransaction.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeProducerTransactionsField(producerTransactions_item: Seq[transactionService.rpc.ProducerTransaction], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ProducerTransactionsField)
    writeProducerTransactionsValue(producerTransactions_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeProducerTransactionsValue(producerTransactions_item: Seq[transactionService.rpc.ProducerTransaction], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, producerTransactions_item.size))
    producerTransactions_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = producerTransactions_item.size
        while (_i < _size) {
          val producerTransactions_item_element = producerTransactions_item(_i)
          producerTransactions_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        producerTransactions_item.foreach { producerTransactions_item_element =>
          producerTransactions_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private def readIsResponseCompletedValue(_iprot: TProtocol): Boolean = {
    _iprot.readBool()
  }

  @inline private def writeIsResponseCompletedField(isResponseCompleted_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IsResponseCompletedField)
    writeIsResponseCompletedValue(isResponseCompleted_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIsResponseCompletedValue(isResponseCompleted_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeBool(isResponseCompleted_item)
  }


  object Immutable extends ThriftStructCodec3[ResponseScanTransactions] {
    override def encode(_item: ResponseScanTransactions, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): ResponseScanTransactions = ResponseScanTransactions.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[ResponseScanTransactions] = ResponseScanTransactions.metaData
  }

  /**
   * The default read-only implementation of ResponseScanTransactions.  You typically should not need to
   * directly reference this class; instead, use the ResponseScanTransactions.apply method to construct
   * new instances.
   */
  class Immutable(
      val producerTransactions: Seq[transactionService.rpc.ProducerTransaction],
      val isResponseCompleted: Boolean,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ResponseScanTransactions {
    def this(
      producerTransactions: Seq[transactionService.rpc.ProducerTransaction] = Seq[transactionService.rpc.ProducerTransaction](),
      isResponseCompleted: Boolean
    ) = this(
      producerTransactions,
      isResponseCompleted,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val producerTransactions: Seq[transactionService.rpc.ProducerTransaction],
      val isResponseCompleted: Boolean,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends ResponseScanTransactions {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the ResponseScanTransactions trait with additional state or
   * behavior and implement the read-only methods from ResponseScanTransactions using an underlying
   * instance.
   */
  trait Proxy extends ResponseScanTransactions {
    protected def _underlying_ResponseScanTransactions: ResponseScanTransactions
    override def producerTransactions: Seq[transactionService.rpc.ProducerTransaction] = _underlying_ResponseScanTransactions.producerTransactions
    override def isResponseCompleted: Boolean = _underlying_ResponseScanTransactions.isResponseCompleted
    override def _passthroughFields = _underlying_ResponseScanTransactions._passthroughFields
  }
}

trait ResponseScanTransactions
  extends ThriftStruct
  with _root_.scala.Product2[Seq[transactionService.rpc.ProducerTransaction], Boolean]
  with HasThriftStructCodec3[ResponseScanTransactions]
  with java.io.Serializable
{
  import ResponseScanTransactions._

  def producerTransactions: Seq[transactionService.rpc.ProducerTransaction]
  def isResponseCompleted: Boolean

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = producerTransactions
  def _2 = isResponseCompleted

  def toTuple: _root_.scala.Tuple2[Seq[transactionService.rpc.ProducerTransaction], Boolean] = {
    (
      producerTransactions,
      isResponseCompleted
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (producerTransactions ne null) {
                writeProducerTransactionsValue(producerTransactions, _oprot)
                _root_.scala.Some(ResponseScanTransactions.ProducerTransactionsField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (true) {
                writeIsResponseCompletedValue(isResponseCompleted, _oprot)
                _root_.scala.Some(ResponseScanTransactions.IsResponseCompletedField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): ResponseScanTransactions = {
    var producerTransactions: Seq[transactionService.rpc.ProducerTransaction] = this.producerTransactions
    var isResponseCompleted: Boolean = this.isResponseCompleted
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        producerTransactions = readProducerTransactionsValue(_blob.read)
      case 2 =>
        isResponseCompleted = readIsResponseCompletedValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      producerTransactions,
      isResponseCompleted,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): ResponseScanTransactions = {
    var producerTransactions: Seq[transactionService.rpc.ProducerTransaction] = this.producerTransactions
    var isResponseCompleted: Boolean = this.isResponseCompleted

    _fieldId match {
      case 1 =>
        producerTransactions = Seq[transactionService.rpc.ProducerTransaction]()
      case 2 =>
        isResponseCompleted = false
      case _ =>
    }
    new Immutable(
      producerTransactions,
      isResponseCompleted,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetProducerTransactions: ResponseScanTransactions = unsetField(1)

  def unsetIsResponseCompleted: ResponseScanTransactions = unsetField(2)


  override def write(_oprot: TProtocol): Unit = {
    ResponseScanTransactions.validate(this)
    _oprot.writeStructBegin(Struct)
    if (producerTransactions ne null) writeProducerTransactionsField(producerTransactions, _oprot)
    writeIsResponseCompletedField(isResponseCompleted, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    producerTransactions: Seq[transactionService.rpc.ProducerTransaction] = this.producerTransactions,
    isResponseCompleted: Boolean = this.isResponseCompleted,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): ResponseScanTransactions =
    new Immutable(
      producerTransactions,
      isResponseCompleted,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[ResponseScanTransactions]

  private def _equals(x: ResponseScanTransactions, y: ResponseScanTransactions): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[ResponseScanTransactions]) &&
      _passthroughFields == other.asInstanceOf[ResponseScanTransactions]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => this.producerTransactions
    case 1 => this.isResponseCompleted
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "ResponseScanTransactions"

  def _codec: ThriftStructCodec3[ResponseScanTransactions] = ResponseScanTransactions
}