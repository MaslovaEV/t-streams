/**
 * Generated by Scrooge
 *   version: 4.12.0
 *   rev: f7190e7f6b92684107b8cebf853d0d2403473022
 *   built at: 20161122-154730
 */
package test

import com.twitter.scrooge.ThriftEnum


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object States {
  
  case object Opened extends test.States {
    val value: Int = 1
    val name: String = "Opened"
    val originalName: String = "Opened"
  }

  private[this] val _SomeOpened = _root_.scala.Some(test.States.Opened)
  
  case object Updated extends test.States {
    val value: Int = 2
    val name: String = "Updated"
    val originalName: String = "Updated"
  }

  private[this] val _SomeUpdated = _root_.scala.Some(test.States.Updated)
  
  case object Invalid extends test.States {
    val value: Int = 3
    val name: String = "Invalid"
    val originalName: String = "Invalid"
  }

  private[this] val _SomeInvalid = _root_.scala.Some(test.States.Invalid)
  
  case object Checkpointed extends test.States {
    val value: Int = 4
    val name: String = "Checkpointed"
    val originalName: String = "Checkpointed"
  }

  private[this] val _SomeCheckpointed = _root_.scala.Some(test.States.Checkpointed)

  case class EnumUnknownStates(value: Int) extends test.States {
    val name: String = "EnumUnknownStates" + value
    def originalName: String = name
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): test.States =
    value match {
      case 1 => test.States.Opened
      case 2 => test.States.Updated
      case 3 => test.States.Invalid
      case 4 => test.States.Checkpointed
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownStates(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): test.States =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownStates(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[test.States] =
    value match {
      case 1 => _SomeOpened
      case 2 => _SomeUpdated
      case 3 => _SomeInvalid
      case 4 => _SomeCheckpointed
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[test.States] =
    name.toLowerCase match {
      case "opened" => _SomeOpened
      case "updated" => _SomeUpdated
      case "invalid" => _SomeInvalid
      case "checkpointed" => _SomeCheckpointed
      case _ => _root_.scala.None
    }

  lazy val list: List[test.States] = scala.List[test.States](
    test.States.Opened,
    test.States.Updated,
    test.States.Invalid,
    test.States.Checkpointed
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait States extends ThriftEnum with Serializable