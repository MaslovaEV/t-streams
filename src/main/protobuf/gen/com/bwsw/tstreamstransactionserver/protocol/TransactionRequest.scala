// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.bwsw.tstreamstransactionserver.protocol



/** @param isReliable
  *   only meaningful isInstant = true,
  * @param data
  *   makes fast operation without awaiting of responses
  */
@SerialVersionUID(0L)
final case class TransactionRequest(
    id: Long = 0L,
    partition: Int = 0,
    isInstant: Boolean = false,
    isReliable: Boolean = false,
    data: _root_.scala.collection.Seq[_root_.com.google.protobuf.ByteString] = _root_.scala.collection.Seq.empty,
    authKey: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TransactionRequest] with com.trueaccord.lenses.Updatable[TransactionRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (id != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, id) }
      if (partition != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, partition) }
      if (isInstant != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, isInstant) }
      if (isReliable != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, isReliable) }
      data.foreach(data => __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(5, data))
      if (authKey != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, authKey) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = id
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = partition
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      {
        val __v = isInstant
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      {
        val __v = isReliable
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      data.foreach { __v =>
        _output__.writeBytes(5, __v)
      };
      {
        val __v = authKey
        if (__v != "") {
          _output__.writeString(6, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.bwsw.tstreamstransactionserver.protocol.TransactionRequest = {
      var __id = this.id
      var __partition = this.partition
      var __isInstant = this.isInstant
      var __isReliable = this.isReliable
      val __data = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.com.google.protobuf.ByteString] ++= this.data)
      var __authKey = this.authKey
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __id = _input__.readInt64()
          case 16 =>
            __partition = _input__.readInt32()
          case 24 =>
            __isInstant = _input__.readBool()
          case 32 =>
            __isReliable = _input__.readBool()
          case 42 =>
            __data += _input__.readBytes()
          case 50 =>
            __authKey = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.bwsw.tstreamstransactionserver.protocol.TransactionRequest(
          id = __id,
          partition = __partition,
          isInstant = __isInstant,
          isReliable = __isReliable,
          data = __data.result(),
          authKey = __authKey
      )
    }
    def withId(__v: Long): TransactionRequest = copy(id = __v)
    def withPartition(__v: Int): TransactionRequest = copy(partition = __v)
    def withIsInstant(__v: Boolean): TransactionRequest = copy(isInstant = __v)
    def withIsReliable(__v: Boolean): TransactionRequest = copy(isReliable = __v)
    def clearData = copy(data = _root_.scala.collection.Seq.empty)
    def addData(__vs: _root_.com.google.protobuf.ByteString*): TransactionRequest = addAllData(__vs)
    def addAllData(__vs: TraversableOnce[_root_.com.google.protobuf.ByteString]): TransactionRequest = copy(data = data ++ __vs)
    def withData(__v: _root_.scala.collection.Seq[_root_.com.google.protobuf.ByteString]): TransactionRequest = copy(data = __v)
    def withAuthKey(__v: String): TransactionRequest = copy(authKey = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = partition
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = isInstant
          if (__t != false) __t else null
        }
        case 4 => {
          val __t = isReliable
          if (__t != false) __t else null
        }
        case 5 => data
        case 6 => {
          val __t = authKey
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(id)
        case 2 => _root_.scalapb.descriptors.PInt(partition)
        case 3 => _root_.scalapb.descriptors.PBoolean(isInstant)
        case 4 => _root_.scalapb.descriptors.PBoolean(isReliable)
        case 5 => _root_.scalapb.descriptors.PRepeated(data.map(_root_.scalapb.descriptors.PByteString(_))(_root_.scala.collection.breakOut))
        case 6 => _root_.scalapb.descriptors.PString(authKey)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.bwsw.tstreamstransactionserver.protocol.TransactionRequest
}

object TransactionRequest extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.bwsw.tstreamstransactionserver.protocol.TransactionRequest] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.bwsw.tstreamstransactionserver.protocol.TransactionRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.bwsw.tstreamstransactionserver.protocol.TransactionRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.bwsw.tstreamstransactionserver.protocol.TransactionRequest(
      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(2), false).asInstanceOf[Boolean],
      __fieldsMap.getOrElse(__fields.get(3), false).asInstanceOf[Boolean],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.com.google.protobuf.ByteString]],
      __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.bwsw.tstreamstransactionserver.protocol.TransactionRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.bwsw.tstreamstransactionserver.protocol.TransactionRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[_root_.com.google.protobuf.ByteString]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ProtocolProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ProtocolProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.bwsw.tstreamstransactionserver.protocol.TransactionRequest(
  )
  implicit class TransactionRequestLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.bwsw.tstreamstransactionserver.protocol.TransactionRequest]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.bwsw.tstreamstransactionserver.protocol.TransactionRequest](_l) {
    def id: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def partition: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.partition)((c_, f_) => c_.copy(partition = f_))
    def isInstant: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.isInstant)((c_, f_) => c_.copy(isInstant = f_))
    def isReliable: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.isReliable)((c_, f_) => c_.copy(isReliable = f_))
    def data: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.com.google.protobuf.ByteString]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def authKey: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.authKey)((c_, f_) => c_.copy(authKey = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val PARTITION_FIELD_NUMBER = 2
  final val ISINSTANT_FIELD_NUMBER = 3
  final val ISRELIABLE_FIELD_NUMBER = 4
  final val DATA_FIELD_NUMBER = 5
  final val AUTHKEY_FIELD_NUMBER = 6
}
